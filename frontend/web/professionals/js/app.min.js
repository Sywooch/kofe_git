var d = new Date(),
        e = new Date;
e.setHours(20, 30);
var f = e.getTime() / 1000 - d.getTime() / 1000;
if(f <= 0) {
    e.setDate(d.getDate() + 1);
    var f = e.getTime() / 1000 - d.getTime() / 1000;    
}

$("#countdown").FlipClock(f, {
    clockFace: "DailyCounter",
    language: "ru",
    countdown: !0
});
$('#today-form').on('beforeSubmit', function () {
    $(".gift").slideToggle("slow");
    return false;
});
$("#reviews-slider").slick({
    infinite: true,
    slidesToShow: 2,
    slidesToScroll: 2,
    autoplay: true,
    autoplaySpeed: 5000,
    responsive: [
        {
            breakpoint: 1200,
            settings: {
                slidesToShow: 2,
                slidesToScroll: 2
            }
        },
        {
            breakpoint: 650,
            settings: {
                slidesToShow: 1,
                slidesToScroll: 1
            }
        }
        // You can unslick at a given breakpoint now by adding:
        // settings: "unslick"
        // instead of a settings object
    ]
});
$("#reviews-slider2").slick({
    infinite: true,
    slidesToShow: 3,
    slidesToScroll: 1,
    autoplay: true,
    autoplaySpeed: 5000,
    responsive: [
        {
            breakpoint: 1200,
            settings: {
                slidesToShow: 2,
                slidesToScroll: 1
            }
        },
        {
            breakpoint: 650,
            settings: {
                slidesToShow: 1,
                slidesToScroll: 1
            }
        }
        // You can unslick at a given breakpoint now by adding:
        // settings: "unslick"
        // instead of a settings object
    ]
});

function initQuoteCarousel() {

    var $quotesWrapper = $(".hero_statement");
    var $quotes = $quotesWrapper.find("blockquote");

    if (!$quotes.length) {
        return;
    }

    var selectNextQuote = function () {
        // keep move first quote in dom to the end to make continous
        var $quote = $quotesWrapper.find("blockquote:first").detach().appendTo($quotesWrapper);

        setTimeout(selectNextQuote, $quote.data("timeout"));
    };

    setTimeout(selectNextQuote, $quotes.filter(":first").data("timeout"));

}

$(function () {
    initQuoteCarousel();
});

$(function ($) {
    $.fn.waterwave = function (options) {
        // DEFAULT OPTIONS
        var settings = $.extend({
            parent: '',
            color: '#000',
            direction: 'up',
            background: ''
        }, options);

        var waterwave = this;

        waterwave.init = function () {
            var TAU = Math.PI * 2;
            var density = 1;
            var speed = 0.5;
            var res = 0.04; // percentage of screen per x segment
            var outerScale = 0.06 / density;
            var inc = 0;
            var c = waterwave[0];
            var ctx = c.getContext('2d');

            function onResize() {
                if (options.direction == 'down') {
                    waterwave.attr({
                        width: $(parent).width() + "px"
                    });
                } else {
                    waterwave.attr({
                        width: $(parent).width() + "px",
                        height: $(parent).height() + "px"
                    });
                }
            }

            onResize();
            setTimeout(function () {
                loop();
            }, 500);
            $(window).resize(onResize);

            function loop() {
                inc -= speed;
                drawWave(options.color);
                requestAnimationFrame(loop);
            }


            function drawBG(patternCanvas, w, h) {
                var space = ctx.createPattern(patternCanvas, 'repeat');
                ctx.fillStyle = space;
                ctx.fillRect(0, 0, w, h);
            }

            function drawWave(color) {
                var w = c.offsetWidth;
                var h = 200;
                var cx = w * 0.1;
                var cy = h * 0.3;
                ctx.clearRect(0, 0, w, h);
                ctx.fillStyle = "#fff";
                var segmentWidth = w * res;
                if (options.background != '') {
                    var image = new Image();
                    //image.src = options.background;
                    image.onload = function () {
                        // create an off-screen canvas
                        var patt = document.createElement('canvas');
                        // set the resized width and height
                        patt.width = w;
                        patt.height = h;
                        patt.getContext('2d').drawImage(this, 0, -1 * (h / 4), patt.width, patt.height);
                        // pass the resized canvas to your createPattern
                        drawBG(patt, w, h);
                    };
                } else {
                    ctx.fillStyle = color;
                }
                ctx.beginPath();
                ctx.moveTo(0, cy);
                for (var i = 0, endi = 1 / res; i <= endi; i++) {
                    var _y = cy + Math.sin((i + inc) * TAU * res * density) * cy * Math.sin(i * TAU * res * density * outerScale);
                    var _x = i * segmentWidth;
                    ctx.lineTo(_x, _y);
                }
                if (options.direction == 'down') {
                    ctx.lineTo(w, 0);
                    ctx.lineTo(0, 0);
                } else {
                    ctx.lineTo(w, h);
                    ctx.lineTo(0, h);
                }
                ctx.closePath();
                ctx.fill();
            }
        };


        waterwave.init();

        return waterwave;


    };
    if ($(".waterwave-canvas").length > 0)
        $(".waterwave-canvas").waterwave({});
    $('.gifts').click(function () {
        $('.gifts').removeClass('active');
        $(this).addClass('active');
        $(".top_menu_big").slideToggle("slow");
    });
    $('.show-model').click(function () {
        $('.bukva').removeClass('hide');
        $('.model-list a').removeClass('hide');
        $(this).addClass('hide');
    });
}(jQuery));

$(document).on('ready', function () {
    $modal = $('.modal-frame');
    $overlay = $('.modal-overlay');

    /* Need this to clear out the keyframe classes so they dont clash with each other between ener/leave. Cheers. */
    $modal.bind('webkitAnimationEnd oanimationend msAnimationEnd animationend', function (e) {
        if ($modal.hasClass('state-leave')) {
            $modal.removeClass('state-leave');
        }
    });

    $('.close').on('click', function () {
        $overlay.removeClass('state-show');
        $modal.removeClass('state-appear').addClass('state-leave');
    });

    $('.open').on('click', function () {
        $overlay.addClass('state-show');
        $modal.removeClass('state-leave').addClass('state-appear');
        return false;
    });

});